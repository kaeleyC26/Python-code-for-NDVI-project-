

# Open an Image
def open_image(path):
  Image = open_image("C:/images.tif")
  return Image

# Save Image
def save_image(image, path):
  save_image(path, 'tif')


# This sections codes  goal is to create a new image with the given size
def createNew_image(k, m): # defining the created image with the varbles i and J, illustrating the final size  
  image = createNew_image("RGB", (k, m), "white") # this is converting the from colour to balck and white 
  return image # this will be returning the image 


# Get the pixel from the given image
def get_pixel(image, k, m):
  # Inside image bounds?
  width, height = image.size
  if k > width or m > height:
    return None

  # Get Pixel
  pixel = image.getpixel((k, m))
  return pixel

# Create a Grayscale version of the image
def convert_grayscale(image):
  # Get size
  width, height = image.size

  # Create new Image and a Pixel Map
  new = createNew_image(width, height)
  pixels = new.load()

  # Transform to grayscale
  for k in range(width):
    for m in range(height):
      # Get Pixel
      pixel = get_pixel(image, k, m)

      # Get R, G, B values (This are int from 0 to 255)
      red =   pixel[0]
      green = pixel[1]
      blue =  pixel[2]

      # Transform to grayscale
      gray = (red * 0.299) + (green * 0.587) + (blue * 0.114)

      # Set Pixel in new image
      pixels[k, m] = (int(gray), int(gray), int(gray))

  # Return new image
  return new

  # Create new Image and a Pixel Map
  new = createNew_image(width, height)
  pixels = new.load()

  # Transform to half tones
  for k in range(0, width, 2):
    for m in range(0, height, 2):
      # Get Pixels
      p1 = get_pixel(image, k, m)
      p2 = get_pixel(image, k, m + 1)
      p3 = get_pixel(image, k + 1, m)
      p4 = get_pixel(image, k + 1, m + 1)

      # Transform to grayscale
      gray1 = (p1[0] * 0.299) + (p1[1] * 0.587) + (p1[2] * 0.114)
      gray2 = (p2[0] * 0.299) + (p2[1] * 0.587) + (p2[2] * 0.114)
      gray3 = (p3[0] * 0.299) + (p3[1] * 0.587) + (p3[2] * 0.114)
      gray4 = (p4[0] * 0.299) + (p4[1] * 0.587) + (p4[2] * 0.114)

      # Saturation Percentage
      sat = (gray1 + gray2 + gray3 + gray4) / 4

       # Draw white/black depending on saturation
      if sat > 223:
         pixels[k, m]         = (255, 255, 255) # White 255 will always be soild white 
         pixels[k, m + 1]     = (255, 255, 255)
         pixels[k + 1, m]     = (255, 255, 255)
         pixels[k + 1, m + 1] = (255, 255, 255) 
      elif sat > 159:
         pixels[k, m]         = (255, 255, 255) # White as three sets of 255 will always be white 
         pixels[k, m + 1]     = (0, 0, 0)       # Black
         pixels[k + 1, m]     = (255, 255, 255) # White
         pixels[k + 1, m + 1] = (255, 255, 255) # White
      elif sat > 95:
         pixels[k, m]         = (255, 255, 255) # White
         pixels[k, m + 1]     = (0, 0, 0)       # Black
         pixels[k + 1, m]     = (0, 0, 0)       # Black
         pixels[k + 1, m + 1] = (255, 255, 255) # White
      elif sat > 32:
         pixels[k, m]         = (0, 0, 0)       # Black
         pixels[k, m + 1]     = (255, 255, 255) # White
         pixels[k + 1, m]     = (0, 0, 0)       # Black
         pixels[k + 1, m + 1] = (0, 0, 0)       # Black
      else:
         pixels[k, m]         = (0, 0, 0)       # Black
         pixels[k, m + 1]     = (0, 0, 0)       # Black
         pixels[k + 1, m]     = (0, 0, 0)       # Black
         pixels[k + 1, m + 1] = (0, 0, 0)       # Black
         
  # Return new image
  return new

# the calculate the NDVI of the deforestation image in the ealry 2000s. 
#Since the bands are stored as an 8bit file, with values ranging from 0 to 255, while NDVI ranges from -1 to 1, 
#we must define the calculations as float values
def ImageNDVI_Year1(band8Before.astype band4Before.astype(float)):
ImageNDVI_Image1_upper = (band8Before.astype(float) - band4Before.astype(float)) # bands 8 and 4 are used because they are the key bands with vegetation. 
ImageNDVI_Image1_lower = (band8Before.astype(float) + band4Before.astype(float)) 
ImageNDVI_Image1 = ImageNDVI_Image1_upper / ImageNDVI_Image1_lower

#this is the caculation for the image that has been logged in the later 2000s
ImageNDVI_Image2_upper = (band8After.astype(float) - band4After.astype(float)) #have to put as float, since NDVI is betwene -1 - 1
ImageNDVI_ Image2_lower = (band8After.astype(float) + band4After.astype(float)) #8 bit is 0 -255, which is way out of range 
ImageNDVI_Image2 = NDVI_Image2_upper / NDVI_Iamge2_lower

#The filenames of results of the NDVI values for the two images are set 
greenbandBefore = 
greenbandAfter = 

 the second image:
# Return color value depending on quadrant and saturation
def get_saturation(value, quadrant):
  if value > 223:
    return 255
  elif value > 159:
    if quadrant != 1:
      return 255

    return 0
  elif value > 95:
    if quadrant == 0 or quadrant == 3:
      return 255

    return 0
  elif value > 32:
    if quadrant == 1:
      return 255

    return 0
  else:
    return 0

# Create a Primary Colors version of the image
def convert_primary(image):
  # Get size
  width, height = image.size

  # Create new Image and a Pixel Map
  new = createNew_image(width, height)
  pixels = new.load()

  # Transform to primary
  for i in range(width):
    for j in range(height):
      # Get Pixel
      pixel = get_pixel(image, i, j)

      # Get R, G, B values (This are int from 0 to 255)
      red =   pixel[0]
      green = pixel[1]
      blue =  pixel[2]

      # Transform to primary
      if red > 127:
        red = 255
      else:
        red = 0
      if green > 127:
        green = 255
      else:
        green = 0
      if blue > 127:
        blue = 255
      else:
        blue = 0

      # Set Pixel in new image
      pixels[i, j] = (int(red), int(green), int(blue))

  # Return new image
  return new
